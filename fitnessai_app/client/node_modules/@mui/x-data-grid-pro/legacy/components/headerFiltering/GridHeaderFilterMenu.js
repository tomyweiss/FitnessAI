import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import MenuList from '@mui/material/MenuList';
import MenuItem from '@mui/material/MenuItem';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import { unstable_capitalize as capitalize } from '@mui/utils';
import { useGridApiContext, GridMenu } from '@mui/x-data-grid';
import { OPERATOR_SYMBOL_MAPPING } from './constants';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function GridHeaderFilterMenu(_ref) {
  var open = _ref.open,
    field = _ref.field,
    targetRef = _ref.targetRef,
    applyFilterChanges = _ref.applyFilterChanges,
    operators = _ref.operators,
    item = _ref.item,
    id = _ref.id,
    labelledBy = _ref.labelledBy;
  var apiRef = useGridApiContext();
  var hideMenu = React.useCallback(function () {
    apiRef.current.hideHeaderFilterMenu();
  }, [apiRef]);
  var handleListKeyDown = React.useCallback(function (event) {
    if (event.key === 'Tab') {
      event.preventDefault();
    }
    if (event.key === 'Escape' || event.key === 'Tab') {
      hideMenu();
    }
  }, [hideMenu]);
  if (!targetRef.current) {
    return null;
  }
  return /*#__PURE__*/_jsx(GridMenu, {
    placement: "bottom-start",
    open: open,
    target: targetRef.current,
    onClickAway: hideMenu,
    onExited: hideMenu,
    children: /*#__PURE__*/_jsx(MenuList, {
      "aria-labelledby": labelledBy,
      id: id,
      onKeyDown: handleListKeyDown,
      children: operators.map(function (op, i) {
        var _op$headerLabel;
        var label = (_op$headerLabel = op == null ? void 0 : op.headerLabel) != null ? _op$headerLabel : apiRef.current.getLocaleText("headerFilterOperator".concat(capitalize(op.value)));
        return /*#__PURE__*/_jsxs(MenuItem, {
          onClick: function onClick() {
            applyFilterChanges(_extends({}, item, {
              operator: op.value
            }));
            hideMenu();
          },
          autoFocus: i === 0 ? open : false,
          selected: op.value === item.operator,
          children: [/*#__PURE__*/_jsx(ListItemIcon, {
            children: OPERATOR_SYMBOL_MAPPING[op.value]
          }), /*#__PURE__*/_jsx(ListItemText, {
            children: label
          })]
        }, "".concat(field, "-").concat(op.value));
      })
    })
  });
}
export { GridHeaderFilterMenu };