import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["getColumnsToRender", "getRootProps"];
import * as React from 'react';
import { unstable_gridFocusColumnHeaderFilterSelector, useGridSelector, gridFilterModelSelector, unstable_gridTabIndexColumnHeaderFilterSelector } from '@mui/x-data-grid';
import { styled } from '@mui/system';
import { useGridColumnHeaders as useGridColumnHeadersCommunity, getTotalHeaderHeight, useGridPrivateApiContext, getGridFilter } from '@mui/x-data-grid/internals';
import { useGridRootProps } from '../../utils/useGridRootProps';
import { jsx as _jsx } from "react/jsx-runtime";
const GridHeaderFilterRow = styled('div', {
  name: 'MuiDataGrid',
  slot: 'HeaderFilterRow',
  overridesResolver: (props, styles) => styles.headerFilterRow
})(() => ({
  display: 'flex',
  borderTop: '1px solid rgba(224, 224, 224, 1)'
}));
export const useGridColumnHeaders = props => {
  const apiRef = useGridPrivateApiContext();
  const {
    headerGroupingMaxDepth,
    hasOtherElementInTabSequence
  } = props;
  const columnHeaderFilterTabIndexState = useGridSelector(apiRef, unstable_gridTabIndexColumnHeaderFilterSelector);
  const _useGridColumnHeaders = useGridColumnHeadersCommunity(_extends({}, props, {
      hasOtherElementInTabSequence: hasOtherElementInTabSequence || columnHeaderFilterTabIndexState !== null
    })),
    {
      getColumnsToRender,
      getRootProps
    } = _useGridColumnHeaders,
    otherProps = _objectWithoutPropertiesLoose(_useGridColumnHeaders, _excluded);
  const headerFiltersRef = React.useRef(null);
  apiRef.current.register('private', {
    headerFiltersElementRef: headerFiltersRef
  });
  const headerFilterMenuRef = React.useRef(null);
  const rootProps = useGridRootProps();
  const disableHeaderFiltering = !rootProps.unstable_headerFilters;
  const headerHeight = Math.floor(rootProps.columnHeaderHeight * props.densityFactor);
  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
  const totalHeaderHeight = getTotalHeaderHeight(apiRef, rootProps.columnHeaderHeight) + (disableHeaderFiltering ? 0 : headerHeight);
  const columnHeaderFilterFocus = useGridSelector(apiRef, unstable_gridFocusColumnHeaderFilterSelector);
  const getColumnFilters = (params, other = {}) => {
    if (disableHeaderFiltering) {
      return null;
    }
    const columnsToRender = getColumnsToRender(params);
    if (columnsToRender == null) {
      return null;
    }
    const {
      renderedColumns,
      firstColumnToRender
    } = columnsToRender;
    const filters = [];
    for (let i = 0; i < renderedColumns.length; i += 1) {
      const colDef = renderedColumns[i];
      const columnIndex = firstColumnToRender + i;
      const hasFocus = columnHeaderFilterFocus?.field === colDef.field;
      const isFirstColumn = columnIndex === 0;
      const tabIndexField = columnHeaderFilterTabIndexState?.field;
      const tabIndex = tabIndexField === colDef.field || isFirstColumn && !props.hasOtherElementInTabSequence ? 0 : -1;
      let headerFilterComponent;
      if (colDef.renderHeaderFilter) {
        headerFilterComponent = colDef.renderHeaderFilter(apiRef.current.getColumnHeaderParams(colDef.field));
      }
      const headerClassName = typeof colDef.headerClassName === 'function' ? colDef.headerClassName({
        field: colDef.field,
        colDef
      }) : colDef.headerClassName;

      // TODO: Support for `isAnyOf` operator
      const filterOperators = colDef.filterOperators?.filter(operator => operator.value !== 'isAnyOf') ?? [];
      const item = filterModel?.items.find(it => it.field === colDef.field && it.operator !== 'isAnyOf') ?? getGridFilter(colDef);
      filters.push( /*#__PURE__*/_jsx(rootProps.slots.headerFilterCell, _extends({
        colIndex: columnIndex,
        height: headerHeight,
        width: colDef.computedWidth,
        colDef: colDef,
        hasFocus: hasFocus,
        tabIndex: tabIndex,
        headerFilterMenuRef: headerFilterMenuRef,
        headerFilterComponent: headerFilterComponent,
        headerClassName: headerClassName,
        filterOperators: filterOperators,
        "data-field": colDef.field,
        item: item
      }, rootProps.slotProps?.headerFilterCell, other), `${colDef.field}-filter`));
    }
    return /*#__PURE__*/_jsx(GridHeaderFilterRow, {
      ref: headerFiltersRef,
      ownerState: rootProps,
      role: "row",
      "aria-rowindex": headerGroupingMaxDepth + 2,
      children: filters
    });
  };
  const rootStyle = {
    minHeight: totalHeaderHeight,
    maxHeight: totalHeaderHeight,
    lineHeight: `${headerHeight}px`
  };
  return _extends({}, otherProps, {
    getColumnFilters,
    getRootProps: disableHeaderFiltering ? getRootProps : (other = {}) => _extends({
      style: rootStyle
    }, other)
  });
};