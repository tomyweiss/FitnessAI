import { GridChildrenFromPathLookup, GridGroupNode, GridRowId, GridRowTreeConfig, GridTreeNode } from '@mui/x-data-grid';
import { GridTreeDepths, GridRowTreeUpdatedGroupsManager } from '@mui/x-data-grid/internals';
import { RowTreeBuilderGroupingCriterion } from './models';
import { DataGridProProps } from '../../models/dataGridProProps';
export declare const getGroupRowIdFromPath: (path: RowTreeBuilderGroupingCriterion[]) => string;
export declare const getNodePathInTree: ({ id, tree, }: {
    id: GridRowId;
    tree: GridRowTreeConfig;
}) => RowTreeBuilderGroupingCriterion[];
export declare const addGroupDefaultExpansion: ({ node, isGroupExpandedByDefault, defaultGroupingExpansionDepth, }: {
    node: GridGroupNode;
    isGroupExpandedByDefault?: DataGridProProps['isGroupExpandedByDefault'];
    defaultGroupingExpansionDepth: number;
}) => {
    childrenExpanded: boolean;
    isAutoGenerated: true;
    type: "group";
    groupingKey: import("@mui/x-data-grid").GridKeyValue | null;
    groupingField: string | null;
    children: GridRowId[];
    footerId?: GridRowId | null | undefined;
    childrenFromPath: GridChildrenFromPathLookup;
    parent: GridRowId | null;
    isPinned?: boolean | undefined;
    id: GridRowId;
    depth: number;
} | {
    childrenExpanded: boolean;
    isAutoGenerated: false;
    type: "group";
    groupingKey: import("@mui/x-data-grid").GridKeyValue | null;
    groupingField: string | null;
    children: GridRowId[];
    footerId?: GridRowId | null | undefined;
    childrenFromPath: GridChildrenFromPathLookup;
    parent: GridRowId | null;
    isPinned?: boolean | undefined;
    id: GridRowId;
    depth: number;
};
/**
 * Insert a node in the tree
 */
export declare const insertNodeInTree: ({ node, tree, treeDepths, }: {
    node: GridTreeNode;
    tree: GridRowTreeConfig;
    treeDepths: GridTreeDepths;
}) => void;
/**
 * Removes a node from the tree
 */
export declare const removeNodeFromTree: ({ node, tree, treeDepths, }: {
    node: GridTreeNode;
    tree: GridRowTreeConfig;
    treeDepths: GridTreeDepths;
}) => void;
/**
 * Updates the `id` and `isAutoGenerated` properties of a group node.
 */
export declare const updateGroupNodeIdAndAutoGenerated: ({ node, updatedNode, tree, treeDepths, }: {
    node: GridGroupNode;
    updatedNode: Pick<GridGroupNode, 'id' | 'isAutoGenerated'>;
    tree: GridRowTreeConfig;
    treeDepths: GridTreeDepths;
}) => void;
export declare const createUpdatedGroupsManager: () => GridRowTreeUpdatedGroupsManager;
